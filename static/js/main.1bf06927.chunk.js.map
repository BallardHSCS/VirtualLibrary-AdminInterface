{"version":3,"sources":["App.jsx","TextContentForm.jsx","PATModal.jsx","reportWebVitals.js","index.js"],"names":["octokit","defaultTheme","createMuiTheme","palette","type","primary","main","secondary","Object","assign","overrides","MUIRichTextEditor","root","textAlign","margin","paddingBottom","width","editor","borderBottom","toolbar","config","username","App","useState","data","setData","loginSuccess","setLoginSuccess","React","PAT","setPAT","useEffect","SavedPAT","localStorage","getItem","undefined","console","log","onLogin","event","a","Octokit","auth","rest","repos","getContent","owner","repo","path","then","fileInfo","actual","JSON","parse","atob","content","setItem","users","getAuthenticated","user","login","onConfigSubmit","newConfig","fileSha","sha","newConfigJSON","stringify","createOrUpdateFileContents","message","Buffer","from","toString","className","theme","onChangePAT","target","value","GithubUsername","IncomingConfig","e","useStyles","makeStyles","marginBottom","padding","formControl","minWidth","visibleControls","TextContentForm","props","classes","change","state","id","convertToRaw","getCurrentContent","variant","onClick","window","location","reload","style","htmlFor","defaultValue","controls","label","onChange","color","PATModal","href","textDecoration","src","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bf06927.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TextContentForm from \"./TextContentForm\";\nimport PATModal from \"./PATModal\";\n\nimport { Container } from \"@material-ui/core\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\n\nimport { Octokit } from \"@octokit/rest\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\nvar octokit;\n\nconst defaultTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#f44336\",\n    },\n    secondary: {\n      main: \"#fff\",\n    },\n  },\n});\n\nObject.assign(defaultTheme, {\n  overrides: {\n    MUIRichTextEditor: {\n      root: {\n        textAlign: \"left\",\n        margin: \"auto\",\n        paddingBottom: \"80px\",\n        width: \"100%\",\n      },\n      editor: {\n        borderBottom: \"3px solid gray\",\n      },\n      toolbar: {\n        paddingBottom: \"20px\",\n      },\n    },\n  },\n});\n\nvar config = {};\nvar username = \"\";\n\nfunction App() {\n  const [data, setData] = useState();\n  const [loginSuccess, setLoginSuccess] = useState();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [PAT, setPAT] = React.useState(\"\");\n  const onChangePAT = (event) => {\n    setPAT(event.target.value);\n  };\n\n  useEffect(() => {\n    let SavedPAT = localStorage.getItem(\"PAT\");\n    if (SavedPAT !== \"\" && SavedPAT !== undefined) {\n      console.log(SavedPAT);\n      onLogin(SavedPAT);\n    }\n  }, []);\n\n  const onLogin = async (event) => {\n    if (event.type === undefined) {\n      console.log(event);\n      octokit = new Octokit({\n        auth: event,\n      });\n    } else {\n      octokit = new Octokit({\n        auth: PAT,\n      });\n    }\n\n    try {\n      octokit.rest.repos\n        .getContent({\n          owner: \"BallardHSCS\",\n          repo: \"VirtualLibrary-AdminInterface\",\n          path: \"config/config.json\",\n        })\n        .then((fileInfo) => {\n          var actual = JSON.parse(atob(fileInfo.data.content));\n          config = actual;\n          console.log(config);\n          console.log(\"done!\");\n          setData([config]);\n        });\n\n      if (event.type !== undefined) {\n        localStorage.setItem(\"PAT\", PAT);\n      }\n      octokit.rest.users.getAuthenticated().then((user) => {\n        username = user.data.login;\n        setLoginSuccess(true);\n      });\n    } catch {\n      setLoginSuccess(false);\n    }\n  };\n\n  const onConfigSubmit = async (newConfig) => {\n    var fileSha = \"\";\n\n    octokit.rest.repos\n      .getContent({\n        owner: \"BallardHSCS\",\n        repo: \"VirtualLibrary-AdminInterface\",\n        path: \"config/config.json\",\n      })\n      .then((fileInfo) => {\n        fileSha = fileInfo.data.sha;\n        console.log(fileInfo);\n\n        let newConfigJSON = JSON.stringify(newConfig);\n        console.log(newConfigJSON);\n        octokit.rest.repos.createOrUpdateFileContents({\n          owner: \"BallardHSCS\",\n          repo: \"VirtualLibrary-AdminInterface\",\n          path: \"config/config.json\",\n          sha: fileSha,\n          message: \"Config update from admin interface\",\n          content: Buffer.from(newConfigJSON).toString(\"base64\"),\n          \"committer.name\": \"Admin Interface\",\n          \"committer.email\": \"nlaha@outlook.com\",\n          \"author.name\": \"Admin Interface\",\n          \"author.email\": \"nlaha@outlook.com\",\n        });\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={defaultTheme}>\n        <Container className=\"centerform\">\n          <h1 className=\"title\">BHS Virtual Library</h1>\n          <h2 className=\"subtitle\">Admin Interface</h2>\n          {!loginSuccess && (\n            <PATModal PAT={PAT} onChangePAT={onChangePAT} onLogin={onLogin} />\n          )}\n          {data && loginSuccess && (\n            <TextContentForm\n              GithubUsername={username}\n              IncomingConfig={config}\n              onConfigSubmit={(e, newConfig) => onConfigSubmit(e, newConfig)}\n            />\n          )}\n        </Container>\n        <footer>\n          <p>\n            Copyright &copy;{\" \"}\n            <script>document.write(new Date().getFullYear())</script> BHS GCC\n            All Rights Reserved\n          </p>\n        </footer>\n      </MuiThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import \"./App.css\";\nimport { FormControl, Card } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\n\nimport MUIRichTextEditor from \"mui-rte\";\nimport { convertToRaw } from \"draft-js\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginBottom: 40,\n    padding: 20,\n  },\n  formControl: {\n    minWidth: \"100%\",\n  },\n});\n\nconst visibleControls = [\n  \"bold\",\n  \"italic\",\n  \"bulletList\",\n  \"numberList\",\n  \"undo\",\n  \"redo\",\n  \"link\",\n];\n\n/** Text entry fields, ie. posters, info panels, etc. */\nfunction TextContentForm(props) {\n  const classes = useStyles();\n\n  var IncomingConfig = props.IncomingConfig;\n\n  const change = (state, id) => {\n    // Get current content\n    IncomingConfig[id] = JSON.stringify(\n      convertToRaw(state.getCurrentContent())\n    );\n  };\n\n  const upload = (state) => {\n    props.onConfigSubmit(IncomingConfig);\n  };\n\n  return (\n    <div>\n      <Card className={classes.root}>\n        <h2>Account</h2>\n        <h3>Signed in as {props.GithubUsername}</h3>\n        <Button\n          variant=\"contained\"\n          className=\"submitbtn\"\n          onClick={() => {\n            localStorage.setItem(\"PAT\", \"\");\n            window.location.reload();\n          }}\n          style={{ width: \"50%\" }}\n        >\n          Clear Stored Token & Sign Out\n        </Button>\n      </Card>\n      <Card className={classes.root}>\n        <h2>Info Panels</h2>\n        <FormControl className={classes.formControl}>\n          <h3 htmlFor=\"Makerspace-Info\">Makerspace Info Panel</h3>\n          <MUIRichTextEditor\n            defaultValue={IncomingConfig[\"Makerspace-Info\"]}\n            controls={visibleControls}\n            id=\"Makerspace-Info\"\n            label=\"Click here and start typing...\"\n            onChange={(state) => {\n              change(state, \"Makerspace-Info\");\n            }}\n          />\n          <h3 htmlFor=\"Printing-Info\">Printing Station Info Panel</h3>\n          <MUIRichTextEditor\n            defaultValue={IncomingConfig[\"Printing-Info\"]}\n            controls={visibleControls}\n            id=\"Printing-Info\"\n            label=\"Click here and start typing...\"\n            onChange={(state) => {\n              change(state, \"Printing-Info\");\n            }}\n          />\n          <h3 htmlFor=\"Bookshelf-Info\">Bookshelf Info Panel</h3>\n          <MUIRichTextEditor\n            defaultValue={IncomingConfig[\"Bookshelf-Info\"]}\n            controls={visibleControls}\n            id=\"Bookshelf-Info\"\n            label=\"Click here and start typing...\"\n            onChange={(state) => {\n              change(state, \"Bookshelf-Info\");\n            }}\n          />\n          <h3 htmlFor=\"Games-Info\">Board Games Info Panel</h3>\n          <MUIRichTextEditor\n            defaultValue={IncomingConfig[\"Games-Info\"]}\n            controls={visibleControls}\n            id=\"Games-Info\"\n            label=\"Click here and start typing...\"\n            onChange={(state) => {\n              change(state, \"Games-Info\");\n            }}\n          />\n          <h3 htmlFor=\"Film-Info\">Film Room Info Panel</h3>\n          <MUIRichTextEditor\n            defaultValue={IncomingConfig[\"Film-Info\"]}\n            controls={visibleControls}\n            id=\"Film-Info\"\n            label=\"Click here and start typing...\"\n            onChange={(state) => {\n              change(state, \"Film-Info\");\n            }}\n          />\n        </FormControl>\n      </Card>\n      <Card className={classes.root}>\n        <h2>Display Objects</h2>\n        <FormControl className={classes.formControl}>\n          <h3 htmlFor=\"Whiteboard01\">Whiteboard by bookshelves</h3>\n          <MUIRichTextEditor\n            defaultValue={IncomingConfig[\"Whiteboard01\"]}\n            controls={visibleControls}\n            id=\"Whiteboard01\"\n            label=\"Click here and start typing...\"\n            onChange={(state) => {\n              change(state, \"Whiteboard01\");\n            }}\n          />\n          <h3 htmlFor=\"ProjectorScreen01\">Wall projector screen</h3>\n          <MUIRichTextEditor\n            defaultValue={IncomingConfig[\"ProjectorScreen01\"]}\n            controls={visibleControls}\n            id=\"ProjectorScreen01\"\n            label=\"Click here and start typing...\"\n            onChange={(state) => {\n              change(state, \"ProjectorScreen01\");\n            }}\n          />\n        </FormControl>\n      </Card>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\"submitbtn\"\n        onClick={upload}\n      >\n        Upload Changes\n      </Button>\n    </div>\n  );\n}\n\nexport default TextContentForm;\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { FormControl, Card, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginBottom: 40,\n    padding: 20,\n  },\n  formControl: {\n    minWidth: \"100%\",\n  },\n});\n\nfunction PATModal(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <h1>Please follow the steps below</h1>\n      <h2>1. Visit the GitHub PAT generation page</h2>\n      <a\n        target=\"_blank\"\n        href=\"https://github.com/settings/tokens\"\n        style={{ textDecoration: \"none\" }}\n      >\n        <Button variant=\"contained\" color=\"secondary\">\n          GitHub PAT Generation Page\n        </Button>\n      </a>\n      <h2>2. Click \"generate new token\"</h2>\n      <img src=\"Step1.jpg\"></img>\n      <h2>3. Set up the token as shown below</h2>\n      <img src=\"Step2.jpg\"></img>\n      <h2>\n        Copy the token to a safe place, you won't be able to copy it again\n      </h2>\n      <img src=\"Step3.jpg\"></img>\n      <h2>Please enter your GitHub Personal Access Token</h2>\n\n      <div>\n        <TextField\n          style={{ width: \"80%\" }}\n          id=\"outlined-basic\"\n          label=\"Github PAT\"\n          variant=\"outlined\"\n          value={props.PAT}\n          onChange={props.onChangePAT}\n        />\n      </div>\n      <div style={{ marginTop: \"20px\" }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={props.onLogin}>\n          Login\n        </Button>\n      </div>\n    </Card>\n  );\n}\n\nexport default PATModal;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}